# coding: utf-8
from __future__ import unicode_literals

import base64
import hashlib
import json
import random
import re
import time

from .common import InfoExtractor
from ..aes import aes_encrypt
from ..compat import compat_str
from ..utils import (
    bytes_to_intlist,
    determine_ext,
    intlist_to_bytes,
    int_or_none,
    strip_jsonp,
    unescapeHTML,
    unsmuggle_url,
)


def md5_text(s):
    if not isinstance(s, compat_str):
        s = compat_str(s)
    return hashlib.md5(s.encode('utf-8')).hexdigest()


class AnvatoIE(InfoExtractor):
    _VALID_URL = r'anvato:(?P<access_key_or_mcp>[^:]+):(?P<id>\d+)'

    # Copied from anvplayer.min.js
    _ANVACK_TABLE = {
        'nbcu_nbcd_desktop_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_desktop_web_qa_1a6f01bdd0dc45a439043b694c8a031d': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_desktop_web_acc_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvod_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvod_web_qa_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvod_web_acc_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_local_monitor_web_acc_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_cable_monitor_web_acc_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_mcpstage_web_qa_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_comcast_comcast_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_comcast_comcast_web_qa_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_comcast_comcastcable_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_comcast_comcastcable_web_qa_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'hearst_hearst_demo_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcpqa_demo_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_nextmedia_demo_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_fs2go_go_all_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_fs2go_go_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_fs2go_go_web_stage_407585454a4400355d4391691c67f361': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_fs2go_go_android_stage_44b714db6f8477f29afcba15a41e1d30': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_cbslocal_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_cbslocal_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_att_att_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_att_att_web_stage_807c5001955fc114a3331fe027ddc76e': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_fs2go_tudor_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mhz_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_charter_charter_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_charter_charter_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_epfox_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_epfox_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_verizon_verizon_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_verizon_verizon_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_foxcom_synd_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'fs2go_foxcom_synd_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_own_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_own_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_ftv_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_ftv_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_univision_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_univision_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_cnbc_springfield_ios_prod_670207fae43d6e9a94c351688851a2ce': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_cnbc_springfieldvod_ios_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_cox_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_cox_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_chnzero_app_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_chnzero_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_discovery_vodpoc_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_discovery_vodpoc_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_cnbc_springfieldvod_ftv_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_cnbc_springfield_ftv_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_capture_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watch3_android_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvod3_android_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_atv_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchv4_android_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvodv4_android_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'rvVKpA50qlOPLFxMjrCGf5pdkdQDm7qn': '1J7ZkY5Qz5lMLi93QOH9IveE7EYB3rLl',
        'nbcu_dtv_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_att_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_dish_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_verizon_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_charter_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_suddenlink_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_wow_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_centurylink_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_atlanticbrd_local_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvod_web_dev_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_nextmedia_app_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_lin_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_univision_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_fs2go_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_sps_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_anv_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_gray_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_hearst_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_cbs_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_mcp_telemundo_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'nbcu_nbcd_watchvodv4_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anvato_scripps_app_ios_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]': '[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'EZqvRyKBJLrgpClDPDF8I7Xpdp40Vx73': '4OxGd2dEakylntVKjKF0UK9PDPYB6A9W',
        'M2v78QkpleXm9hPp9jUXI63x5vA6BogR': 'ka6K32k7ZALmpINkjJUGUo0OE42Md1BQ',
        'nbcu_nbcd_desktop_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]_secure': '[REDACTED_AWS_SECRET_ACCESS_KEY]'
    }

    _MCP_TO_ACCESS_KEY_TABLE = {
        'qa': 'anvato_mcpqa_demo_web_stage_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'lin': 'anvato_mcp_lin_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'univison': 'anvato_mcp_univision_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'uni': 'anvato_mcp_univision_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'dev': 'anvato_mcp_fs2go_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'sps': 'anvato_mcp_sps_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'spsstg': 'anvato_mcp_sps_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'anv': 'anvato_mcp_anv_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'gray': 'anvato_mcp_gray_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'hearst': 'anvato_mcp_hearst_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'cbs': 'anvato_mcp_cbs_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]',
        'telemundo': 'anvato_mcp_telemundo_web_prod_[REDACTED_AWS_SECRET_ACCESS_KEY]'
    }

    _API_KEY = '[REDACTED_AWS_SECRET_ACCESS_KEY]HyA'

    _ANVP_RE = r'<script[^>]+\bdata-anvp\s*=\s*(["\'])(?P<anvp>(?:(?!\1).)+)\1'
    _AUTH_KEY = b'\x31\xc2\x42\x84\x9e\x73\xa0\xce'

    _TESTS = [{
        # from https://www.boston25news.com/news/watch-humpback-whale-breaches-right-next-to-fishing-boat-near-nh/817484874
        'url': 'anvato:8v9BEynrwx8EFLYpgfOWcG1qJqyXKlRM:4465496',
        'info_dict': {
            'id': '4465496',
            'ext': 'mp4',
            'title': 'VIDEO: Humpback whale breaches right next to NH boat',
            'description': 'VIDEO: Humpback whale breaches right next to NH boat. Footage courtesy: Zach Fahey.',
            'duration': 22,
            'timestamp': 1534855680,
            'upload_date': '20180821',
            'uploader': 'ANV',
        },
        'params': {
            'skip_download': True,
        },
    }, {
        # from https://sanfrancisco.cbslocal.com/2016/06/17/source-oakland-cop-on-leave-for-having-girlfriend-help-with-police-reports/
        'url': 'anvato:DVzl9QRzox3ZZsP9bNu5Li3X7obQOnqP:3417601',
        'only_matching': True,
    }]

    def __init__(self, *args, **kwargs):
        super(AnvatoIE, self).__init__(*args, **kwargs)
        self.__server_time = None

    def _server_time(self, access_key, video_id):
        if self.__server_time is not None:
            return self.__server_time

        self.__server_time = int(self._download_json(
            self._api_prefix(access_key) + 'server_time?anvack=' + access_key, video_id,
            note='Fetching server time')['server_time'])

        return self.__server_time

    def _api_prefix(self, access_key):
        return 'https://tkx2-%s.anvato.net/rest/v2/' % ('prod' if 'prod' in access_key else 'stage')

    def _get_video_json(self, access_key, video_id):
        # See et() in anvplayer.min.js, which is an alias of getVideoJSON()
        video_data_url = self._api_prefix(access_key) + 'mcp/video/%s?anvack=%s' % (video_id, access_key)
        server_time = self._server_time(access_key, video_id)
        input_data = '%d~%s~%s' % (server_time, md5_text(video_data_url), md5_text(server_time))

        auth_secret = intlist_to_bytes(aes_encrypt(
            bytes_to_intlist(input_data[:64]), bytes_to_intlist(self._AUTH_KEY)))

        video_data_url += '&X-Anvato-Adst-Auth=' + base64.b64encode(auth_secret).decode('ascii')
        anvrid = md5_text(time.time() * 1000 * random.random())[:30]
        payload = {
            'api': {
                'anvrid': anvrid,
                'anvstk': md5_text('%s|%s|%d|%s' % (
                    access_key, anvrid, server_time,
                    self._ANVACK_TABLE.get(access_key, self._API_KEY))),
                'anvts': server_time,
            },
        }

        return self._download_json(
            video_data_url, video_id, transform_source=strip_jsonp,
            data=json.dumps(payload).encode('utf-8'))

    def _get_anvato_videos(self, access_key, video_id):
        video_data = self._get_video_json(access_key, video_id)

        formats = []
        for published_url in video_data['published_urls']:
            video_url = published_url['embed_url']
            media_format = published_url.get('format')
            ext = determine_ext(video_url)

            if ext == 'smil' or media_format == 'smil':
                formats.extend(self._extract_smil_formats(video_url, video_id))
                continue

            tbr = int_or_none(published_url.get('kbps'))
            a_format = {
                'url': video_url,
                'format_id': ('-'.join(filter(None, ['http', published_url.get('cdn_name')]))).lower(),
                'tbr': tbr if tbr != 0 else None,
            }

            if media_format == 'm3u8' and tbr is not None:
                a_format.update({
                    'format_id': '-'.join(filter(None, ['hls', compat_str(tbr)])),
                    'ext': 'mp4',
                })
            elif media_format == 'm3u8-variant' or ext == 'm3u8':
                formats.extend(self._extract_m3u8_formats(
                    video_url, video_id, 'mp4', entry_protocol='m3u8_native',
                    m3u8_id='hls', fatal=False))
                continue
            elif ext == 'mp3' or media_format == 'mp3':
                a_format['vcodec'] = 'none'
            else:
                a_format.update({
                    'width': int_or_none(published_url.get('width')),
                    'height': int_or_none(published_url.get('height')),
                })
            formats.append(a_format)

        self._sort_formats(formats)

        subtitles = {}
        for caption in video_data.get('captions', []):
            a_caption = {
                'url': caption['url'],
                'ext': 'tt' if caption.get('format') == 'SMPTE-TT' else None
            }
            subtitles.setdefault(caption['language'], []).append(a_caption)

        return {
            'id': video_id,
            'formats': formats,
            'title': video_data.get('def_title'),
            'description': video_data.get('def_description'),
            'tags': video_data.get('def_tags', '').split(','),
            'categories': video_data.get('categories'),
            'thumbnail': video_data.get('thumbnail'),
            'timestamp': int_or_none(video_data.get(
                'ts_published') or video_data.get('ts_added')),
            'uploader': video_data.get('mcp_id'),
            'duration': int_or_none(video_data.get('duration')),
            'subtitles': subtitles,
        }

    @staticmethod
    def _extract_urls(ie, webpage, video_id):
        entries = []
        for mobj in re.finditer(AnvatoIE._ANVP_RE, webpage):
            anvplayer_data = ie._parse_json(
                mobj.group('anvp'), video_id, transform_source=unescapeHTML,
                fatal=False)
            if not anvplayer_data:
                continue
            video = anvplayer_data.get('video')
            if not isinstance(video, compat_str) or not video.isdigit():
                continue
            access_key = anvplayer_data.get('accessKey')
            if not access_key:
                mcp = anvplayer_data.get('mcp')
                if mcp:
                    access_key = AnvatoIE._MCP_TO_ACCESS_KEY_TABLE.get(
                        mcp.lower())
            if not access_key:
                continue
            entries.append(ie.url_result(
                'anvato:%s:%s' % (access_key, video), ie=AnvatoIE.ie_key(),
                video_id=video))
        return entries

    def _extract_anvato_videos(self, webpage, video_id):
        anvplayer_data = self._parse_json(
            self._html_search_regex(
                self._ANVP_RE, webpage, 'Anvato player data', group='anvp'),
            video_id)
        return self._get_anvato_videos(
            anvplayer_data['accessKey'], anvplayer_data['video'])

    def _real_extract(self, url):
        url, smuggled_data = unsmuggle_url(url, {})
        self._initialize_geo_bypass({
            'countries': smuggled_data.get('geo_countries'),
        })

        mobj = re.match(self._VALID_URL, url)
        access_key, video_id = mobj.group('access_key_or_mcp', 'id')
        if access_key not in self._ANVACK_TABLE:
            access_key = self._MCP_TO_ACCESS_KEY_TABLE.get(
                access_key) or access_key
        return self._get_anvato_videos(access_key, video_id)
